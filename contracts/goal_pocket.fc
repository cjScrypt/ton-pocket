#include "common/stdlib.fc";
#include "common/errors.fc";
#include "common/params.fc";
#include "common/utils.fc";
#include "goal_pocket/errors.fc";
#include "goal_pocket/op.fc";
#include "goal_pocket/storage.fc";



() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; TODO: Handle bounced messages
        return ();
    }


    (int goal_id, int contributed_amount, int target, slice owner_address, slice pocket_wallet_address, int start_time, int duration) = load_storage();

    slice sender_address = in_msg_body~load_msg_addr();
    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (op == op::add) {
        (int amount, slice response_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        throw_unless(INVALID_CALLER, equal_slices_bits(sender_address, pocket_wallet_address));
        throw_unless(GOAL_TARGET_REACHED, contributed_amount < target);
        contributed_amount += amount;

        save_storage(goal_id, contributed_amount, target, owner_address, pocket_wallet_address, start_time, duration);
        if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
            cell msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(response_address)
                .store_coins(msg_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses, 32)
                .store_uint(query_id, 64)
            .end_cell();
            send_raw_message(msg, 2);
        }
    }

    if (op == op::unlock) {
        int amount = in_msg_body~load_coins();
        throw_unless(INVALID_CALLER, equal_slices_bits(sender_address, owner_address));
        throw_unless(INSUFFICIENT_FUNDS, amount > contributed_amount);

        contributed_amount -= amount;
        cell msg_body = begin_cell()
            .store_uint(op::unlock, 32)
            .store_uint(query_id, 64)
            .store_uint(goal_id, 64)
            .store_coins(amount)
            .store_coins(target)
            .store_uint(start_time, 32)
            .store_uint(duration, 32)
        .end_cell();

        save_storage(goal_id, contributed_amount, target, owner_address, pocket_wallet_address, start_time, duration);
        send_simple_message(0, pocket_wallet_address, msg_body, 64);
    }
}

(int, int, int, slice, slice, int, int) get_goal_pocket_data() method_id {
    return load_storage();
}