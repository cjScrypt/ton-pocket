#include "common/stdlib.fc";
#include "common/errors.fc";
#include "mint/storage.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    load_storage();

    slice sender_address = cs~load_msg_addr();

    (int op, int query_id) = (in_msg_body~load_uint(32), in_mdg_body~load_uint(64));

    if (op == op::burn_notification) {
        (int jetton_amount, slice from_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        throw_unless(74,
            equal_slices(calculate_user_pocket_wallet_address(from_address, my_address(), storage::pocket_wallet_code)),
            sender_address
        );
        throw_unless(INVALID_AMOUNT, jetton_amount > 0);

        storage::total_supply -= jetton_amount;
        slice response_address = in_msg_body~load_msg_addr();

        save_storage();
        call_pay_to(jetton_amount, from_address, response_address, int query_id);
        return ();
    }

    if (op == op::mint) {
        throw_unless(73, equal_slices(sender_address, storage::router_address));
        (slice to_address, int amount) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins());
        cell custom_payload = in_msg_body~load_dict();
        storage::total_supply += amount;
        mint_tokens(to_address, amount, custom_payload);
        save_storage();
    }
}

slice get_wallet_address(slice owner_address) method_id {

}