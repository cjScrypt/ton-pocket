#include "common/stdlib.fc";
#include "common/errors.fc";
#include "common/params.fc";
#include "common/wallet-utils.fc";
#include "pocket_wallet/errors.fc";
#include "pocket_wallet/params.fc";
#include "pocket_wallet/utils.fc";
#include "pocket_wallet/op.fc";


() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();

    force_workchain_0(to_owner_address);

    (int spendable_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int goal_balance) = load_storage();
    spendable_balance -= jetton_amount;
    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, spendable_balance >= 0);

    cell state_init = calculate_pocket_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_pocket_wallet_address(state_init);
    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_dict();
    int forward_ton_amount = in_msg_body~load_coins();

    throw_unless(708, slice_bits(in_msg_body) >= 1);

    slice either_forward_payload = in_msg_body;
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(to_wallet_address)
      .store_coins(0)
      .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
      .store_ref(state_init);
    var msg_body = begin_cell()
      .store_uint(op::internal_transfer, 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(owner_address)
      .store_slice(response_address)
      .store_dict(custom_payload)
      .store_coins(forward_ton_amount)
      .store_slice(either_forward_payload)
     .end_cell();

    msg.store_ref(msg_body);
    int fwd_count = forward_ton_amount ? 2 : 1;
    throw_unless(709, msg_value >
                        forward_ton_amount +
                        fwd_count * fwd_fee +
                        (2 * REQUIRED_GAS + REQUIRED_TON_STORAGE)
    );
    send_raw_message(msg.end_cell(), 64);
    save_storage(spendable_balance, owner_address, jetton_master_address, jetton_wallet_code, goal_balance);
}


() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    (int spendable_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int goal_balance) = load_storage();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(707,
      equal_slices(jetton_master_address, sender_address)
        |
        equal_slices(calculate_user_pocket_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
    );
    slice custom_payload = in_msg_body~load_dict();

    int forward_ton_amount = in_msg_body~load_coins();
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee = REQUIRED_TON_STORAGE - min(ton_balance_before_msg, REQUIRED_TON_STORAGE);
    msg_value -= (storage_fee + REQUIRED_GAS);

    if (forward_ton_amount) {
        msg_value -= (forward_ton_amount + fwd_fee);
        slice either_forward_payload = in_msg_body;
        var msg_body = begin_cell()
            .store_uint(op::transfer_notification, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(from_address)
            .store_slice(either_forward_payload)
            .end_cell();
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(forward_ton_amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);
        send_raw_message(msg.end_cell(), 1);
    }

    if (custom_payload.dict_empty?()) {
        spendable_balance += jetton_amount;
    } else {
        goal_balance += jetton_amount;
        if(custom_payload.dict_empty?()) {
            throw(EMPTY_GOAL_PAYLOAD);
        }
        send_update_goal_message(jetton_amount, owner_address, custom_payload);
    }

    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(query_id, 64)
        .end_cell();
        send_raw_message(msg, 2);
    }

    save_storage(spendable_balance, owner_address, jetton_master_address, jetton_wallet_code, goal_balance);
}


() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    (int spendable_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int goal_balance) = load_storage();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    ;; ignore custom payload
    ;; slice custom_payload = in_msg_body~load_dict();
    spendable_balance -= jetton_amount;
    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, spendable_balance >= 0);
    throw_unless(707, msg_value > fwd_fee + 2 * REQUIRED_GAS);

    cell msg_body = begin_cell()
        .store_uint(op::burn_notification, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_master_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 64);

    save_storage(spendable_balance, owner_address, jetton_master_address, jetton_wallet_code, goal_balance);
}


() unlock_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    (int spendable_balance, slice owner_address, _, _, int goal_balance) = load_storage();
    (int query_id, int goal_id, int unlock_amount, int target_amount, int start_time,
        int duration) = (in_msg_body~load_uint(64), in_msg_body~load_uint(64),
                            in_msg_body~load_coins(), in_msg_body~load_uint(32),
                                in_msg_body~load_uint(32));

    slice gp_address = calculate_goal_pocket_address(goal_id, target_amount, owner_address, start_time, duration);
    throw_unless(INVALID_CALLER, equal_slices(sender_address, gp_address));

    goal_balance -= unlock_amount;
    spendable_balance += unlock_amount;
    save_storage(spendable_balance, owner_address, jetton_master_address, jetton_wallet_code, goal_balance);

    if ((owner_address.preload_uint(2) != 0) & (msg_value > 0)) {
        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(owner_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses, 32)
            .store_uint(query_id, 64)
        .end_cell();
        send_raw_message(msg, 2);
    }
}


() on_bounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32);
    (int spendable_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int goal_balance) = load_storage();
    int op = in_msg_body~load_uint(32);
    throw_unless(709, (op == op::internal_transfer) | (op == op::burn_notification) | (op == op::add));
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    if (op == op::add) {
        goal_balance -= jetton_amount; ;; Unlock tokens
    } 
    spendable_balance += jetton_amount;
    save_storage(spendable_balance, owner_address, jetton_master_address, jetton_wallet_code, goal_balance);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip destination
    cs~load_coins();    ;; skip value
    cs~skip_bits(1);    ;; skip extracurrencry collection
    cs~load_coins();    ;; skip ihr_fee
    ;; int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer) { ;; transfer token
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer) {
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == op::burn) {
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::unlock_tokens) {
        unlock_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(WRONG_OP);
}