#include "imports/stdlib.fc";
#include "pocket_wallet/errors.fc";
#include "pocket_wallet/op.fc";
#include "pocket_wallet/utils.fc";


() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int token_id = in_msg_body~load_uint(8);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();

    force_workchain_0(to_owner_address);

    (int usdt_balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code, int ton_balance) = load_storage();
    throw_unless(705, equal_slices(owner_address, sender_address));

    if (token_id == TOKEN_TON) {
        ton_balance -= jetton_amount;
        throw_unless(706, ton_balance >= 0);
    } else {
        usdt_balance -= jetton_amount;
        throw_unless(706, usdt_balance >= 0);
    }

    cell state_init = calculate_pocket_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_pocket_wallet_address(state_init);
    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_dict();
    int forward_ton_amount = in_msg_body~load_coins();

    throw_unless(708, slice_bits(in_msg_body) >= 1);

    slice either_forward_payload = in_msg_body;
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(to_wallet_address)
      .store_coins(0)
      .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
      .store_ref(state_init);
    var msg_body = begin_cell()
      .store_uint(op::internal_transfer, 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(owner_address)
      .store_slice(response_address)
      .store_coins(forward_ton_amount)
      .store_slice(either_forward_payload)
     .end_cell();

    msg.store_ref(msg_body);
    int fwd_count = forward_ton_amount ? 2 : 1;
    throw_unless(709, msg_value >
                        forward_ton_amount +
                        fwd_count * fwd_fee +
                        (2 * REQUIRED_GAS + REQUIRED_TON_STORAGE)
    );
    send_raw_message(msg.end_cell(), 64);
    save_storage(usdt_balance, owner_address, jetton_master_address, jetton_wallet_code, ton_balance);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; TODO: Handle bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip destination
    cs~load_coins();    ;; skip value
    cs~skip_bits(1);    ;; skip extracurrencry collection
    cs~load_coins();    ;; skip ihr_fee
    ;; int fwd_fee = cs~load_coins();

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer) { ;; transfer usdt
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer) {
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == op::burn) {
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(WRONG_OP);
}